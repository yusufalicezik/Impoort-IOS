//
// BasicErrorControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class BasicErrorControllerAPI {
    /**
     errorHtml
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorHtmlUsingDELETE(completion: @escaping ((_ data: ModelAndView?,_ error: Error?) -> Void)) {
        errorHtmlUsingDELETEWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     errorHtml
     - DELETE /error
     - examples: [{output=none}]

     - returns: RequestBuilder<ModelAndView> 
     */
    open class func errorHtmlUsingDELETEWithRequestBuilder() -> RequestBuilder<ModelAndView> {
        let path = "/error"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelAndView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     errorHtml
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorHtmlUsingGET(completion: @escaping ((_ data: ModelAndView?,_ error: Error?) -> Void)) {
        errorHtmlUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     errorHtml
     - GET /error
     - examples: [{output=none}]

     - returns: RequestBuilder<ModelAndView> 
     */
    open class func errorHtmlUsingGETWithRequestBuilder() -> RequestBuilder<ModelAndView> {
        let path = "/error"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelAndView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     errorHtml
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorHtmlUsingHEAD(completion: @escaping ((_ data: ModelAndView?,_ error: Error?) -> Void)) {
        errorHtmlUsingHEADWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     errorHtml
     - HEAD /error
     - examples: [{output=none}]

     - returns: RequestBuilder<ModelAndView> 
     */
    open class func errorHtmlUsingHEADWithRequestBuilder() -> RequestBuilder<ModelAndView> {
        let path = "/error"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelAndView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     errorHtml
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorHtmlUsingOPTIONS(completion: @escaping ((_ data: ModelAndView?,_ error: Error?) -> Void)) {
        errorHtmlUsingOPTIONSWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     errorHtml
     - OPTIONS /error
     - examples: [{output=none}]

     - returns: RequestBuilder<ModelAndView> 
     */
    open class func errorHtmlUsingOPTIONSWithRequestBuilder() -> RequestBuilder<ModelAndView> {
        let path = "/error"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelAndView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     errorHtml
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorHtmlUsingPATCH(completion: @escaping ((_ data: ModelAndView?,_ error: Error?) -> Void)) {
        errorHtmlUsingPATCHWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     errorHtml
     - PATCH /error
     - examples: [{output=none}]

     - returns: RequestBuilder<ModelAndView> 
     */
    open class func errorHtmlUsingPATCHWithRequestBuilder() -> RequestBuilder<ModelAndView> {
        let path = "/error"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelAndView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     errorHtml
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorHtmlUsingPOST(completion: @escaping ((_ data: ModelAndView?,_ error: Error?) -> Void)) {
        errorHtmlUsingPOSTWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     errorHtml
     - POST /error
     - examples: [{output=none}]

     - returns: RequestBuilder<ModelAndView> 
     */
    open class func errorHtmlUsingPOSTWithRequestBuilder() -> RequestBuilder<ModelAndView> {
        let path = "/error"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelAndView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     errorHtml
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func errorHtmlUsingPUT(completion: @escaping ((_ data: ModelAndView?,_ error: Error?) -> Void)) {
        errorHtmlUsingPUTWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     errorHtml
     - PUT /error
     - examples: [{output=none}]

     - returns: RequestBuilder<ModelAndView> 
     */
    open class func errorHtmlUsingPUTWithRequestBuilder() -> RequestBuilder<ModelAndView> {
        let path = "/error"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelAndView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
