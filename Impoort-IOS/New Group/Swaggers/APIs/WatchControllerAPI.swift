//
// WatchControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class WatchControllerAPI {
    /**
     kullanıcının kendisini takip edenleri görüntülemek için paging yapıldı
     
     - parameter myId: (query) myId 
     - parameter userId: (path) userId 
     - parameter pageNumber: (query) pageNumber (optional)
     - parameter pageSize: (query) pageSize (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWatcherUsingGET(myId: String, userId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: WatcherPageList?,_ error: Error?) -> Void)) {
        getWatcherUsingGETWithRequestBuilder(myId: myId, userId: userId, pageNumber: pageNumber, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     kullanıcının kendisini takip edenleri görüntülemek için paging yapıldı
     - GET /api/v1/watch/watcher/{userId}
     - examples: [{output=none}]
     
     - parameter myId: (query) myId 
     - parameter userId: (path) userId 
     - parameter pageNumber: (query) pageNumber (optional)
     - parameter pageSize: (query) pageSize (optional)

     - returns: RequestBuilder<WatcherPageList> 
     */
    open class func getWatcherUsingGETWithRequestBuilder(myId: String, userId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<WatcherPageList> {
        var path = "/api/v1/watch/watcher/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "myId": myId, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<WatcherPageList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     kullanıcın takip ettiklerini görüntülemek için paging yapıldı
     
     - parameter myId: (query) myId 
     - parameter userId: (path) userId 
     - parameter pageNumber: (query) pageNumber (optional)
     - parameter pageSize: (query) pageSize (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWatchingUsingGET(myId: String, userId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: WatchingPageList?,_ error: Error?) -> Void)) {
        getWatchingUsingGETWithRequestBuilder(myId: myId, userId: userId, pageNumber: pageNumber, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     kullanıcın takip ettiklerini görüntülemek için paging yapıldı
     - GET /api/v1/watch/watching/{userId}
     - examples: [{output=none}]
     
     - parameter myId: (query) myId 
     - parameter userId: (path) userId 
     - parameter pageNumber: (query) pageNumber (optional)
     - parameter pageSize: (query) pageSize (optional)

     - returns: RequestBuilder<WatchingPageList> 
     */
    open class func getWatchingUsingGETWithRequestBuilder(myId: String, userId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<WatchingPageList> {
        var path = "/api/v1/watch/watching/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "myId": myId, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<WatchingPageList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     value takibi durdurmak için
     
     - parameter watchingId: (path) watchingId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopWatchingUsingDELETE(watchingId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        stopWatchingUsingDELETEWithRequestBuilder(watchingId: watchingId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     value takibi durdurmak için
     - DELETE /api/v1/watch/{watchingId}
     
     - parameter watchingId: (path) watchingId 

     - returns: RequestBuilder<Void> 
     */
    open class func stopWatchingUsingDELETEWithRequestBuilder(watchingId: Int) -> RequestBuilder<Void> {
        var path = "/api/v1/watch/{watchingId}"
        let watchingIdPreEscape = "\(watchingId)"
        let watchingIdPostEscape = watchingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{watchingId}", with: watchingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     bir kullanıcıyı takip etmek için
     
     - parameter watcherId: (query) watcherId (optional)
     - parameter watchingId: (query) watchingId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func watchUserUsingPOST(watcherId: String? = nil, watchingId: String? = nil, completion: @escaping ((_ data: Watch?,_ error: Error?) -> Void)) {
        watchUserUsingPOSTWithRequestBuilder(watcherId: watcherId, watchingId: watchingId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     bir kullanıcıyı takip etmek için
     - POST /api/v1/watch
     - examples: [{output=none}]
     
     - parameter watcherId: (query) watcherId (optional)
     - parameter watchingId: (query) watchingId (optional)

     - returns: RequestBuilder<Watch> 
     */
    open class func watchUserUsingPOSTWithRequestBuilder(watcherId: String? = nil, watchingId: String? = nil) -> RequestBuilder<Watch> {
        let path = "/api/v1/watch"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "watcherId": watcherId, 
            "watchingId": watchingId
        ])

        let requestBuilder: RequestBuilder<Watch>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
