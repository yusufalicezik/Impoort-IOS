//
// PostControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PostControllerAPI {
    /**
     var olan gönderiye yeni yorum eklemek için
     
     - parameter commentRequestDTO: (body) commentRequestDTO 
     - parameter postId: (path) postId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addNewCommentUsingPOST(commentRequestDTO: CommentRequestDTO, postId: Int, completion: @escaping ((_ data: CommentResponseDTO?,_ error: Error?) -> Void)) {
        addNewCommentUsingPOSTWithRequestBuilder(commentRequestDTO: commentRequestDTO, postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     var olan gönderiye yeni yorum eklemek için
     - POST /api/v1/post/{postId}/addComment
     - examples: [{output=none}]
     
     - parameter commentRequestDTO: (body) commentRequestDTO 
     - parameter postId: (path) postId 

     - returns: RequestBuilder<CommentResponseDTO> 
     */
    open class func addNewCommentUsingPOSTWithRequestBuilder(commentRequestDTO: CommentRequestDTO, postId: Int) -> RequestBuilder<CommentResponseDTO> {
        var path = "/api/v1/post/{postId}/addComment"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{postId}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentRequestDTO)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommentResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     var olan postu beğenmek için
     
     - parameter likeRequestDTO: (body) likeRequestDTO 
     - parameter postId: (path) postId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addNewLikeUsingPOST(likeRequestDTO: LikeRequestDTO, postId: Int, completion: @escaping ((_ data: LikeResponseDTO?,_ error: Error?) -> Void)) {
        addNewLikeUsingPOSTWithRequestBuilder(likeRequestDTO: likeRequestDTO, postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     var olan postu beğenmek için
     - POST /api/v1/post/{postId}/addNewLike
     - examples: [{output=none}]
     
     - parameter likeRequestDTO: (body) likeRequestDTO 
     - parameter postId: (path) postId 

     - returns: RequestBuilder<LikeResponseDTO> 
     */
    open class func addNewLikeUsingPOSTWithRequestBuilder(likeRequestDTO: LikeRequestDTO, postId: Int) -> RequestBuilder<LikeResponseDTO> {
        var path = "/api/v1/post/{postId}/addNewLike"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{postId}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: likeRequestDTO)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LikeResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     yeni post eklemek için
     
     - parameter postRequestDTO: (body) postRequestDTO 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addNewPostUsingPOST(postRequestDTO: PostRequestDTO, completion: @escaping ((_ data: PostResponseDTO?,_ error: Error?) -> Void)) {
        addNewPostUsingPOSTWithRequestBuilder(postRequestDTO: postRequestDTO).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     yeni post eklemek için
     - POST /api/v1/post
     - examples: [{output=none}]
     
     - parameter postRequestDTO: (body) postRequestDTO 

     - returns: RequestBuilder<PostResponseDTO> 
     */
    open class func addNewPostUsingPOSTWithRequestBuilder(postRequestDTO: PostRequestDTO) -> RequestBuilder<PostResponseDTO> {
        let path = "/api/v1/post"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postRequestDTO)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PostResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     yapılan yorumu silmek için 
     
     - parameter commentRequestDTO: (body) commentRequestDTO 
     - parameter postId: (path) postId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCommentUsingPOST(commentRequestDTO: IDCommentRequestDTO, postId: Int, completion: @escaping ((_ data: CommentResponseDTO?,_ error: Error?) -> Void)) {
        deleteCommentUsingPOSTWithRequestBuilder(commentRequestDTO: commentRequestDTO, postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     yapılan yorumu silmek için 
     - POST /api/v1/post/{postId}/deleteComment
     - examples: [{output=none}]
     
     - parameter commentRequestDTO: (body) commentRequestDTO 
     - parameter postId: (path) postId 

     - returns: RequestBuilder<CommentResponseDTO> 
     */
    open class func deleteCommentUsingPOSTWithRequestBuilder(commentRequestDTO: IDCommentRequestDTO, postId: Int) -> RequestBuilder<CommentResponseDTO> {
        var path = "/api/v1/post/{postId}/deleteComment"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{postId}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentRequestDTO)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommentResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     beğeniyi geri almak için
     
     - parameter likeRequestDTO: (body) likeRequestDTO 
     - parameter postId: (path) postId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLikeUsingDELETE(likeRequestDTO: LikeRequestDTO, postId: Int, completion: @escaping ((_ data: LikeResponseDTO?,_ error: Error?) -> Void)) {
        deleteLikeUsingDELETEWithRequestBuilder(likeRequestDTO: likeRequestDTO, postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     beğeniyi geri almak için
     - DELETE /api/v1/post/{postId}/deleteLike
     - examples: [{output=none}]
     
     - parameter likeRequestDTO: (body) likeRequestDTO 
     - parameter postId: (path) postId 

     - returns: RequestBuilder<LikeResponseDTO> 
     */
    open class func deleteLikeUsingDELETEWithRequestBuilder(likeRequestDTO: LikeRequestDTO, postId: Int) -> RequestBuilder<LikeResponseDTO> {
        var path = "/api/v1/post/{postId}/deleteLike"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{postId}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: likeRequestDTO)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LikeResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     takibe aldığım bir postun takibini bırakmak için
     
     - parameter postId: (path) postId 
     - parameter userId: (query) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWatchUsingDELETE(postId: Int, userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWatchUsingDELETEWithRequestBuilder(postId: postId, userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     takibe aldığım bir postun takibini bırakmak için
     - DELETE /api/v1/post/{postId}/watch
     
     - parameter postId: (path) postId 
     - parameter userId: (query) userId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWatchUsingDELETEWithRequestBuilder(postId: Int, userId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/post/{postId}/watch"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{postId}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     postun bütün beğenilerini görüntülemek için
     
     - parameter postId: (path) postId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllLikeUsingGET(postId: Int, completion: @escaping ((_ data: [LikeResponseDTO]?,_ error: Error?) -> Void)) {
        getAllLikeUsingGETWithRequestBuilder(postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     postun bütün beğenilerini görüntülemek için
     - GET /api/v1/post/{postId}/getAllLike
     - examples: [{output=none}]
     
     - parameter postId: (path) postId 

     - returns: RequestBuilder<[LikeResponseDTO]> 
     */
    open class func getAllLikeUsingGETWithRequestBuilder(postId: Int) -> RequestBuilder<[LikeResponseDTO]> {
        var path = "/api/v1/post/{postId}/getAllLike"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{postId}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[LikeResponseDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     bir postun bütün yorumlarını görüntülemek için kullanılır
     
     - parameter postId: (path) postId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPostCommentUsingGET(postId: Int, completion: @escaping ((_ data: [CommentResponseDTO]?,_ error: Error?) -> Void)) {
        getPostCommentUsingGETWithRequestBuilder(postId: postId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     bir postun bütün yorumlarını görüntülemek için kullanılır
     - GET /api/v1/post/{postId}/getAllComment
     - examples: [{output=none}]
     
     - parameter postId: (path) postId 

     - returns: RequestBuilder<[CommentResponseDTO]> 
     */
    open class func getPostCommentUsingGETWithRequestBuilder(postId: Int) -> RequestBuilder<[CommentResponseDTO]> {
        var path = "/api/v1/post/{postId}/getAllComment"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{postId}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[CommentResponseDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     takip ettiğim kişilerin postlarını görüntülemek için Paging yapılır
     
     - parameter userId: (query) userId 
     - parameter pageNumber: (query) pageNumber (optional)
     - parameter pageSize: (query) pageSize (optional)
     - parameter profilePost: (query) profilePost (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listPostsUsingGET(userId: String, pageNumber: Int? = nil, pageSize: Int? = nil, profilePost: Bool? = nil, completion: @escaping ((_ data: PostPageList?,_ error: Error?) -> Void)) {
        listPostsUsingGETWithRequestBuilder(userId: userId, pageNumber: pageNumber, pageSize: pageSize, profilePost: profilePost).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     takip ettiğim kişilerin postlarını görüntülemek için Paging yapılır
     - GET /api/v1/post
     - examples: [{output=none}]
     
     - parameter userId: (query) userId 
     - parameter pageNumber: (query) pageNumber (optional)
     - parameter pageSize: (query) pageSize (optional)
     - parameter profilePost: (query) profilePost (optional)

     - returns: RequestBuilder<PostPageList> 
     */
    open class func listPostsUsingGETWithRequestBuilder(userId: String, pageNumber: Int? = nil, pageSize: Int? = nil, profilePost: Bool? = nil) -> RequestBuilder<PostPageList> {
        let path = "/api/v1/post"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "profilePost": profilePost, 
            "userId": userId
        ])

        let requestBuilder: RequestBuilder<PostPageList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     kullanıcının takip ettiği postları görüntülemesi için
     
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listWatchedPostsUsingGET(userId: String, completion: @escaping ((_ data: [PostResponseDTO]?,_ error: Error?) -> Void)) {
        listWatchedPostsUsingGETWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     kullanıcının takip ettiği postları görüntülemesi için
     - GET /api/v1/post/{userId}/watchedPost
     - examples: [{output=none}]
     
     - parameter userId: (path) userId 

     - returns: RequestBuilder<[PostResponseDTO]> 
     */
    open class func listWatchedPostsUsingGETWithRequestBuilder(userId: String) -> RequestBuilder<[PostResponseDTO]> {
        var path = "/api/v1/post/{userId}/watchedPost"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[PostResponseDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     var olan bir postu takibe almak için
     
     - parameter postId: (path) postId 
     - parameter userId: (query) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func watchPostUsingPOST(postId: Int, userId: String, completion: @escaping ((_ data: PostResponseDTO?,_ error: Error?) -> Void)) {
        watchPostUsingPOSTWithRequestBuilder(postId: postId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     var olan bir postu takibe almak için
     - POST /api/v1/post/{postId}/watch
     - examples: [{output=none}]
     
     - parameter postId: (path) postId 
     - parameter userId: (query) userId 

     - returns: RequestBuilder<PostResponseDTO> 
     */
    open class func watchPostUsingPOSTWithRequestBuilder(postId: Int, userId: String) -> RequestBuilder<PostResponseDTO> {
        var path = "/api/v1/post/{postId}/watch"
        let postIdPreEscape = "\(postId)"
        let postIdPostEscape = postIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{postId}", with: postIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId
        ])

        let requestBuilder: RequestBuilder<PostResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
