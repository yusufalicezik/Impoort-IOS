//
// UserControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserControllerAPI {
    /**
     Bunu kullanmayın test için yazılmıştı
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllUserUsingGET(completion: @escaping ((_ data: [UserResponseDTO]?,_ error: Error?) -> Void)) {
        getAllUserUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Bunu kullanmayın test için yazılmıştı
     - GET /api/v1/user/users
     - examples: [{output=none}]

     - returns: RequestBuilder<[UserResponseDTO]> 
     */
    open class func getAllUserUsingGETWithRequestBuilder() -> RequestBuilder<[UserResponseDTO]> {
        let path = "/api/v1/user/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UserResponseDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     diğer bir kullanıcının profilini görüntülemek için
     
     - parameter myId: (query) myId 
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserUsingGET(myId: String, userId: String, completion: @escaping ((_ data: UserResponseDTO?,_ error: Error?) -> Void)) {
        getUserUsingGETWithRequestBuilder(myId: myId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     diğer bir kullanıcının profilini görüntülemek için
     - GET /api/v1/user/profile/{userId}
     - examples: [{output=none}]
     
     - parameter myId: (query) myId 
     - parameter userId: (path) userId 

     - returns: RequestBuilder<UserResponseDTO> 
     */
    open class func getUserUsingGETWithRequestBuilder(myId: String, userId: String) -> RequestBuilder<UserResponseDTO> {
        var path = "/api/v1/user/profile/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "myId": myId
        ])

        let requestBuilder: RequestBuilder<UserResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     kullanıcın bilgilerini güncellemek için
     
     - parameter user: (body) user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserUsingPOST(user: UserUpdateDto, completion: @escaping ((_ data: UserResponseDTO?,_ error: Error?) -> Void)) {
        updateUserUsingPOSTWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     kullanıcın bilgilerini güncellemek için
     - POST /api/v1/user/updateUser
     - examples: [{output=none}]
     
     - parameter user: (body) user 

     - returns: RequestBuilder<UserResponseDTO> 
     */
    open class func updateUserUsingPOSTWithRequestBuilder(user: UserUpdateDto) -> RequestBuilder<UserResponseDTO> {
        let path = "/api/v1/user/updateUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
