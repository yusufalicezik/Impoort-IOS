//
// ResponseEntity.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ResponseEntity: Codable {

    public enum StatusCode: String, Codable { 
               case _100CONTINUE = "100 CONTINUE"
        case _101SWITCHINGPROTOCOLS = "101 SWITCHING_PROTOCOLS"
        case _102PROCESSING = "102 PROCESSING"
        case _103CHECKPOINT = "103 CHECKPOINT"
        case _200OK = "200 OK"
        case _201CREATED = "201 CREATED"
        case _202ACCEPTED = "202 ACCEPTED"
        case _203NONAUTHORITATIVEINFORMATION = "203 NON_AUTHORITATIVE_INFORMATION"
        case _204NOCONTENT = "204 NO_CONTENT"
        case _205RESETCONTENT = "205 RESET_CONTENT"
        case _206PARTIALCONTENT = "206 PARTIAL_CONTENT"
        case _207MULTISTATUS = "207 MULTI_STATUS"
        case _208ALREADYREPORTED = "208 ALREADY_REPORTED"
        case _226IMUSED = "226 IM_USED"
        case _300MULTIPLECHOICES = "300 MULTIPLE_CHOICES"
        case _301MOVEDPERMANENTLY = "301 MOVED_PERMANENTLY"
        case _302FOUND = "302 FOUND"
        case _302MOVEDTEMPORARILY = "302 MOVED_TEMPORARILY"
        case _303SEEOTHER = "303 SEE_OTHER"
        case _304NOTMODIFIED = "304 NOT_MODIFIED"
        case _305USEPROXY = "305 USE_PROXY"
        case _307TEMPORARYREDIRECT = "307 TEMPORARY_REDIRECT"
        case _308PERMANENTREDIRECT = "308 PERMANENT_REDIRECT"
        case _400BADREQUEST = "400 BAD_REQUEST"
        case _401UNAUTHORIZED = "401 UNAUTHORIZED"
        case _402PAYMENTREQUIRED = "402 PAYMENT_REQUIRED"
        case _403FORBIDDEN = "403 FORBIDDEN"
        case _404NOTFOUND = "404 NOT_FOUND"
        case _405METHODNOTALLOWED = "405 METHOD_NOT_ALLOWED"
        case _406NOTACCEPTABLE = "406 NOT_ACCEPTABLE"
        case _407PROXYAUTHENTICATIONREQUIRED = "407 PROXY_AUTHENTICATION_REQUIRED"
        case _408REQUESTTIMEOUT = "408 REQUEST_TIMEOUT"
        case _409CONFLICT = "409 CONFLICT"
        case _410GONE = "410 GONE"
        case _411LENGTHREQUIRED = "411 LENGTH_REQUIRED"
        case _412PRECONDITIONFAILED = "412 PRECONDITION_FAILED"
        case _413PAYLOADTOOLARGE = "413 PAYLOAD_TOO_LARGE"
        case _413REQUESTENTITYTOOLARGE = "413 REQUEST_ENTITY_TOO_LARGE"
        case _414URITOOLONG = "414 URI_TOO_LONG"
        case _414REQUESTURITOOLONG = "414 REQUEST_URI_TOO_LONG"
        case _415UNSUPPORTEDMEDIATYPE = "415 UNSUPPORTED_MEDIA_TYPE"
        case _416REQUESTEDRANGENOTSATISFIABLE = "416 REQUESTED_RANGE_NOT_SATISFIABLE"
        case _417EXPECTATIONFAILED = "417 EXPECTATION_FAILED"
        case _418IAMATEAPOT = "418 I_AM_A_TEAPOT"
        case _419INSUFFICIENTSPACEONRESOURCE = "419 INSUFFICIENT_SPACE_ON_RESOURCE"
        case _420METHODFAILURE = "420 METHOD_FAILURE"
        case _421DESTINATIONLOCKED = "421 DESTINATION_LOCKED"
        case _422UNPROCESSABLEENTITY = "422 UNPROCESSABLE_ENTITY"
        case _423LOCKED = "423 LOCKED"
        case _424FAILEDDEPENDENCY = "424 FAILED_DEPENDENCY"
        case _426UPGRADEREQUIRED = "426 UPGRADE_REQUIRED"
        case _428PRECONDITIONREQUIRED = "428 PRECONDITION_REQUIRED"
        case _429TOOMANYREQUESTS = "429 TOO_MANY_REQUESTS"
        case _431REQUESTHEADERFIELDSTOOLARGE = "431 REQUEST_HEADER_FIELDS_TOO_LARGE"
        case _451UNAVAILABLEFORLEGALREASONS = "451 UNAVAILABLE_FOR_LEGAL_REASONS"
        case _500INTERNALSERVERERROR = "500 INTERNAL_SERVER_ERROR"
        case _501NOTIMPLEMENTED = "501 NOT_IMPLEMENTED"
        case _502BADGATEWAY = "502 BAD_GATEWAY"
        case _503SERVICEUNAVAILABLE = "503 SERVICE_UNAVAILABLE"
        case _504GATEWAYTIMEOUT = "504 GATEWAY_TIMEOUT"
        case _505HTTPVERSIONNOTSUPPORTED = "505 HTTP_VERSION_NOT_SUPPORTED"
        case _506VARIANTALSONEGOTIATES = "506 VARIANT_ALSO_NEGOTIATES"
        case _507INSUFFICIENTSTORAGE = "507 INSUFFICIENT_STORAGE"
        case _508LOOPDETECTED = "508 LOOP_DETECTED"
        case _509BANDWIDTHLIMITEXCEEDED = "509 BANDWIDTH_LIMIT_EXCEEDED"
        case _510NOTEXTENDED = "510 NOT_EXTENDED"
        case _511NETWORKAUTHENTICATIONREQUIRED = "511 NETWORK_AUTHENTICATION_REQUIRED"
    }
    public var body: JSONValue?
    public var statusCode: StatusCode?
    public var statusCodeValue: Int?

    public init(body: JSONValue?, statusCode: StatusCode?, statusCodeValue: Int?) {
        self.body = body
        self.statusCode = statusCode
        self.statusCodeValue = statusCodeValue
    }


}

